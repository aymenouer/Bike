<?php

namespace ReservationBundle\Repository;

use Doctrine\DBAL\DBALException;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;

/**
 * ReservationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReservationRepository extends \Doctrine\ORM\EntityRepository
{

    public function nombre_reservation($ID_U)
    {
        $conn = $this->getEntityManager()
            ->getConnection();
        $sql = "SELECT count(*) as nb FROM `reservation` WHERE ID_U='$ID_U' ";

        try {
            $stmt = $conn->prepare($sql);
        } catch (DBALException $e) {
        }
        $stmt->execute();
        return $stmt->fetch();

    }

    public function mise_a_jour()
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = "DELETE FROM `reservation` WHERE DATEDIFF(DATE_F,NOW() )<0";
        try {
            $stmt = $conn->prepare($sql);
        } catch (DBALException $e) {
        }
        $stmt->execute();
        return 1;
    }
    public function count($id)
    {

        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT * FROM `reservation` WHERE (ID_U=$id)";
        try {
            $stmt = $conn->prepare($sql);
        } catch (DBALException $e) {
        }
        $stmt->execute();
        return $stmt->rowCount();
    }
    public function produit_reservation_velo($id)
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT * FROM `reservation` r INNER JOIN `velo`v INNER JOIN `produit`p where (r.idV=v.id) and (v.idA=p.ID_P) and(r.ID_U= $id)";
        try {
            $stmt = $conn->prepare($sql);
        } catch (DBALException $e) {
        }
        $stmt->execute();
        return $stmt->fetchAll();
    }

    public function list_velo_reserve_id($idV)
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT * FROM `reservation` WHERE idV=".$idV." ";
        try {
            $stmt = $conn->prepare($sql);
        } catch (DBALException $e) {
        }
        $stmt->execute();
        return $stmt->fetchAll();
    }

    public function list_disponible1(string $date_F,string $date_D,$ID_V)
    {

        $conn = $this->getEntityManager()->getConnection();


        $sql = "SELECT * FROM `reservation` WHERE ( `idV`=$ID_V AND  NOT((\"$date_F\"BETWEEN \"$date_D\" AND `Date_D`) OR  (\"$date_D\" BETWEEN `Date_F` AND \"$date_F\")))";
        try {
            $stmt = $conn->prepare($sql);
        } catch (DBALException $e) {
        }
        $stmt->execute();
        return $stmt->fetchAll();
    }
    public function prixReservation($ID_R)
    {

        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT DATEDIFF(`Date_F`,`Date_D`) as nbr FROM reservation WHERE `idR`=$ID_R";
        try {
            $stmt = $conn->prepare($sql);
        } catch (DBALException $e) {
        }
        $stmt->execute();
        return $stmt->fetch();
    }
    public  function triDateD()
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT * FROM `reservation` ORDER BY `reservation`.`Date_D` DESC";
        try {
            $stmt = $conn->prepare($sql);
        } catch (DBALException $e) {
        }
        $stmt->execute();
        return $stmt;
    }
    public function editing($dateD,$dateF,$idR)
    {
        $conn = $this->getEntityManager()->getConnection();

        $sql = "UPDATE `reservation` SET `Date_D`=\"$dateD\", `Date_F`= \"$dateF\" WHERE `idR`=$idR";
        try {
            $stmt = $conn->prepare($sql);
        } catch (DBALException $e) {
        }
        $stmt->execute();
        return $stmt->fetchAll();
    }

}
